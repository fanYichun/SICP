; EXERCISE 3.1
(define (make-accumulator init)
  (define (add num)
    (begin (set! init (+ init num))
           init))
  (define (sub num)
    (begin (set! init (- init num))
           init))
  (define (dispatch symbol)
    (cond ((eq? symbol 'add) add)
          ((eq? symbol 'sub) sub)
          (else (error "Unknown request"))))
  dispatch)

; EXERCISE 3.2
(define (make-monitored proc)
  (define counter 0)
  (lambda (x)
    (cond ((eq? x 'how-many-calls?)
           counter)
          ((eq? x 'reset-count)
           (begin (set! counter 0)
                  0))
          (else (begin (set! counter (+ counter 1))
                       (proc x))))))

; EXERCISE 3.3 & 3.7
(define (make-account balance password)
  (define (call-the-cops) (error "Call the cops"))
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)

  (define counter 0)
  (define (dispatch pw m)
    (if (eq? pw password)
      (cond ((eq? m 'withdraw) (begin (set! counter 0)
                                      withdraw))
            ((eq? m 'deposit) (begin (set! counter 0)
                                     deposit))
            (else (error "Unknown request -- MAKE-ACCOUNT"
                         m)))
      (begin (set! counter (+ counter 1))
             (if (> counter 6) 
               (call-the-cops)
               (error "Incorrect password")))))
  dispatch)

(define (make-joint acc pw new-pw)
  (define (dispatch password m)
    (if (eq? password new-pw)
      (acc pw m)
      (error "Incorrect password")))
  dispatch)

(define peter-acc (make-account 100 'open-sename))

; EXERCISE 3.5
(define (estimate-integral P? x1 x2 y1 y2 trials)
  (* (monte-carlo trials (lambda ()
                           (P? x1 x2 y1 y2)))
     (- x2 x1)
     (- y2 y1)))

(define (average x y)
  (/ (+ x y)
     2))

(define (P? x1 x2 y1 y2)
  (<= (+ (square (- (random-in-range x1 x2)
                    (average x1 x2)))
         (square (- (random-in-range y1 y2)
                    (average y1 y2))))
      (square (/ (- x2 x1)
                 2))))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

; EXERCISE 3.6
(define random-init 7)
(define rand
  (let ((x random-init))
    (lambda (arg)
      (cond ((eq? arg 'generate)
             (set! x (rand-updata x))
             x)
            ((eq? arg 'reset)
             (lambda (new-value)
               (begin (set! x new-value)
                      x)))
            (else (error "Invalid"))))))

; EXERCISE 3.8
(define (make-f init)
  (define (dispatch x)
    (if (= x 0)
      (begin (set! init 0)
             init)
      init))
  dispatch)
(define f (make-f 1))

