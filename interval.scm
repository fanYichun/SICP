(define (make-interval upper lower)
  (cons upper lower))
(define (lower-bound interval)
  (cdr interval))
(define (upper-bound interval)
  (car interval))

(define (add-interval x y)
  (make-interval (+ (upper-bound x)
                    (upper-bound y))
                 (+ (lower-bound x)
                    (lower-bound y))))
(define (minus-interval x)
  (make-interval (- 0 (lower-bound x))
                 (- 0 (upper-bound x))))
(define (sub-interval x y)
  (add-interval x (minus-interval y)))
(define (mul-interval x y)
  (let ((x-lb (lower-bound x))
        (x-ub (upper-bound x))
        (y-lb (lower-bound y))
        (y-ub (upper-bound y)))
    (cond ((and (< x-ub 0) (< y-ub 0)) (make-interval (* x-lb y-lb) (* x-ub y-ub)))
          ((and (< x-ub 0) (< y-lb 0) (> y-ub 0)) (make-interval (* x-lb y-lb) (* x-lb y-ub)))
          ((and (< x-ub 0) (> y-lb 0)) (make-interval (* x-ub y-lb) (* x-lb y-ub)))
          ((and (< x-lb 0) (> x-ub 0) (< y-ub 0)) (make-interval (* x-lb y-lb) (* x-ub y-lb)))
          ((and (< x-lb 0) (> x-ub 0) (< y-lb 0) (> y-ub 0)) (make-interval (max (* x-lb y-lb) (* x-ub y-ub)) (min (* x-lb y-ub) (* x-ub y-lb))))
          ((and (< x-lb 0) (> x-ub 0) (> y-lb 0)) (make-interval (* x-ub y-ub) (* x-lb y-ub)))
          ((and (> x-lb 0) (< y-ub 0)) (make-interval (* x-lb y-ub) (* x-ub y-lb)))
          ((and (> x-lb 0) (< y-lb 0) (> y-ub 0)) (make-interval (* x-ub y-ub) (* x-ub y-lb)))
          ((and (> x-lb 0) (> y-lb 0)) (make-interval (* x-ub y-ub) (* x-lb y-lb))))))

(define (div x y)
  (let ((y-lb (lower-bound y))
        (y-ub (upper-bound y)))
    (if (< (* y-lb y-ub) 0)
      (error "Not defined")
      (mul-interval x
                    (make-interval (/ 1.0 y-ub) (/ 1.0 y-lb))))))
